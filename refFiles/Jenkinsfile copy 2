pipeline {
    agent none
    
    environment {
        REPO = "https://github.com/AbuArwa001/kuranet.git"
        WEB1_IP = "172.234.252.70"
        WEB2_IP = "172.234.253.249"
        DOCKER_IMAGE = "python:3.12-slim"
        APP_DIR = "~/kuranet"
        VENV_PATH = "${APP_DIR}/.venv"
        SSH_CREDENTIALS_ID = 'ssh-credentials'
        DJANGO_SECRET_KEY = credentials('django-secret-key')
    }

    stages {
        // CI PHASE START
        stage('Checkout') {
            agent any
            steps {
                checkout scm
            }
        }

        stage('Security Scan') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-u root -v /tmp:/tmp'
                    reuseNode true
                }
            }
            steps {
                script {
                    sh "pip install bandit safety"
                    
                    // Bandit scan with threshold
                    def banditExit = sh(
                        script: "bandit -r kuranet/ -ll",
                        returnStatus: true
                    )
                    
                    // Dependency vulnerability check
                    sh "safety check --full-report"
                    
                    if (banditExit != 0) {
                        error("Security scan failed: Bandit found critical issues")
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/bandit-report.*,**/safety-report.*', allowEmptyArchive: true
                }
            }
        }

        stage('Unit Tests') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-u root -v /tmp:/tmp'
                    reuseNode true
                }
            }
            steps {
                withCredentials([string(credentialsId: 'django-secret-key', variable: 'SECRET_KEY')]) {
                    withEnv(["DJANGO_SECRET_KEY=${env.SECRET_KEY}"]) {
                        sh '''
                            # Make script executable if needed
                            chmod +x ./scripts/run_tests.sh || true
                            
                            # Execute with error trapping
                            ./scripts/run_tests.sh 2>&1 | tee test-output.log
                            
                            # Store raw output for debugging
                            echo "### TEST OUTPUT ###"
                            cat test-output.log
                        '''
                    }
                }
            }
            post {
                always {
                    junit 'test-results.xml'
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                }
            }
        }

        stage('Static Analysis') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-u root -v /tmp:/tmp'
                    reuseNode true
                }
            }
            steps {
                sh """
                    pip install pylint
                    pylint kuranet/ --exit-zero > pylint-report.txt
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pylint-report.txt', allowEmptyArchive: true
                }
            }
        }
        // CI PHASE END

        stage('Integration Tests') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-u root -v /tmp:/tmp'
                    reuseNode true
                }
            }
            steps {
                withCredentials([string(credentialsId: 'django-secret-key', variable: 'SECRET_KEY')]) {
                    withEnv(["DJANGO_SECRET_KEY=${env.SECRET_KEY}"]) {
                        sh """
                            python -m venv ${VENV_PATH}
                            . ${VENV_PATH}/bin/activate
                            pip install -r requirements.txt
                            python tests/integration_tests.py
                        """
                    }
                }
            }
        }


        stage('Deploy to Production') {
            agent any
            steps {
                sshagent(credentials: [SSH_CREDENTIALS_ID]) {
                    withCredentials([string(credentialsId: 'django-secret-key', variable: 'SECRET_KEY')]) {
                        retry(3) {
                            sh """
                                for IP in ${WEB1_IP} ${WEB2_IP}; do
                                    TIMESTAMP=\$(date +%Y%m%d_%H%M)
                                    ssh -o StrictHostKeyChecking=no ubuntu@\${IP} "
                                        # Backup existing directory
                                        [ -d ${APP_DIR} ] && mv ${APP_DIR} ${APP_DIR}_bak_\${TIMESTAMP}
                                        # rm directory if it exists
                                        [ -d ${APP_DIR} ] &&  \
                                        echo 'Removing existing application directory' && \
                                        rm -rf ${APP_DIR} || true
                                        
                                        # Clone repo to correct location
                                        git clone ${REPO} || {
                                            echo 'Failed to clone repository'
                                            exit 1
                                        }
                                        
                                        # Copy environment file
                                        cp ~/.env ${APP_DIR}/ || {
                                            echo 'Failed to copy .env file'
                                            exit 1
                                        }
                                        
                                        # Setup virtual environment and dependencies
                                        cd ${APP_DIR}
                                        python3 -m venv ${VENV_PATH}
                                        . ${VENV_PATH}/bin/activate
                                        pip install --upgrade pip
                                        pip install -r requirements.txt || {
                                            echo 'Failed to install requirements'
                                            exit 1
                                        }
                                        
                                        # Run Django management commands
                                        python manage.py makemigrations users polls
                                        python manage.py migrate || {
                                            echo 'Database migration failed'
                                            exit 1
                                        }
                                        
                                        python manage.py collectstatic --noinput || {
                                            echo 'Static files collection failed'
                                            exit 1
                                        }
                                        
                                        # Restart service
                                        sudo systemctl restart gunicorn || {
                                            echo 'Failed to restart gunicorn'
                                            exit 1
                                        }
                                    " || {
                                        echo "Deployment failed on \${IP}"
                                        exit 1
                                    }
                                    echo "Successfully deployed to \${IP}"
                                done
                            """
                        }
                    }
                }
            }
        }
        // CD PHASE END
    }
    
    post {
        always {
            script {
                // Wrap in node context since we're using agent none at top level
                node {
                    junit '**/test-results.xml'
                    archiveArtifacts artifacts: '**/*-report.txt,**/test-results.xml', allowEmptyArchive: true
                }
            }
        }
        success {
            script {
                withCredentials([string(credentialsId: 'discord-webhook-url', variable: 'DISCORD_WEBHOOK_URL')]) {
                    discordSend(
                        description: "Deployment Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        link: env.BUILD_URL,
                        webhookURL: "${DISCORD_WEBHOOK_URL}"
                    )
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'discord-webhook-url', variable: 'DISCORD_WEBHOOK_URL')]) {
                    discordSend(
                        description: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        link: env.BUILD_URL,
                        webhookURL: "${DISCORD_WEBHOOK_URL}"
                    )
                }
            }
        }
    }
}
        // stage('Deploy to Production') {
        //     agent any
        //     steps {
        //         sshagent(credentials: [SSH_CREDENTIALS_ID]) {
        //             withCredentials([string(credentialsId: 'django-secret-key', variable: 'SECRET_KEY')]) {
        //                 retry(3) {
        //                     sh """
        //                         for IP in ${WEB1_IP}, ${WEB2_IP}; do
        //                             ssh -o StrictHostKeyChecking=no ubuntu@\${IP} "
        //                                 # First configure passwordless sudo for deployment
                                        
        //                                 cd ${APP_DIR} || exit 1
                                        
        //                                 # Reset repository state
        //                                 git reset --hard HEAD || exit 1
                                        
        //                                 # Clean static files using passwordless sudo
        //                                 sudo /bin/rm -rf ${APP_DIR}/static/ || true
        //                                 sudo /bin/rm -rf ${APP_DIR}/staticfiles/ || true
        //                                 mkdir -p staticfiles || true
        //                                 mkdir -p static || true
                                        
        //                                 # Pull updates safely
        //                                 git fetch origin main || exit 1
        //                                 git checkout main || exit 1
        //                                 git reset --hard origin/main || exit 1
                                        
        //                                 # Recreate .env if needed
        //                                 # [ -f ~/.env ] && cp ~/.env . || true
                                        
        //                                 # Reinstall dependencies
        //                                 source ${VENV_PATH}/bin/activate
        //                                 pip install -U pip || true
        //                                 pip install -r requirements.txt || exit 1
                                        
        //                                 # Django operations
        //                                 python manage.py makemigrations users polls || exit 1
        //                                 python manage.py migrate --noinput || exit 1
                                        
        //                                 # Collect static with correct permissions
        //                                 python manage.py collectstatic --noinput || true
        //                                 sudo chown -R www-data:www-data static/ || true
        //                                 sudo chown -R www-data:www-data staticfiles/ || true
                                        
        //                                 # Restart services using passwordless sudo
        //                                 sudo systemctl restart gunicorn || exit 1
        //                                 echo \"Deployed commit: \$(git rev-parse --short HEAD)\"
        //                             " || {
        //                                 echo "Failed on \${IP}"; exit 1
        //                             }
        //                         done
        //                     """
        //                 }
        //             }
        //         }
        //     }
        // }